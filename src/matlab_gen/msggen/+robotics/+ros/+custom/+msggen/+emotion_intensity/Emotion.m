classdef Emotion < robotics.ros.Message
    %Emotion MATLAB implementation of emotion_intensity/Emotion
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'emotion_intensity/Emotion' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '7a451b2deb931fd6373385acc62e4ead' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Anger
        Contempt
        Disgust
        Fear
        Happiness
        Neutral
        Sadness
        Surprise
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Anger', 'Contempt', 'Disgust', 'Fear', 'Happiness', 'Header', 'Neutral', 'Sadness', 'Surprise'} % List of non-constant message properties
        ROSPropertyList = {'anger', 'contempt', 'disgust', 'fear', 'happiness', 'header', 'neutral', 'sadness', 'surprise'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Emotion(msg)
            %Emotion Construct the message object Emotion
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Emotion', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function anger = get.Anger(obj)
            %get.Anger Get the value for property Anger
            anger = single(obj.JavaMessage.getAnger);
        end
        
        function set.Anger(obj, anger)
            %set.Anger Set the value for property Anger
            validateattributes(anger, {'numeric'}, {'nonempty', 'scalar'}, 'Emotion', 'Anger');
            
            obj.JavaMessage.setAnger(anger);
        end
        
        function contempt = get.Contempt(obj)
            %get.Contempt Get the value for property Contempt
            contempt = single(obj.JavaMessage.getContempt);
        end
        
        function set.Contempt(obj, contempt)
            %set.Contempt Set the value for property Contempt
            validateattributes(contempt, {'numeric'}, {'nonempty', 'scalar'}, 'Emotion', 'Contempt');
            
            obj.JavaMessage.setContempt(contempt);
        end
        
        function disgust = get.Disgust(obj)
            %get.Disgust Get the value for property Disgust
            disgust = single(obj.JavaMessage.getDisgust);
        end
        
        function set.Disgust(obj, disgust)
            %set.Disgust Set the value for property Disgust
            validateattributes(disgust, {'numeric'}, {'nonempty', 'scalar'}, 'Emotion', 'Disgust');
            
            obj.JavaMessage.setDisgust(disgust);
        end
        
        function fear = get.Fear(obj)
            %get.Fear Get the value for property Fear
            fear = single(obj.JavaMessage.getFear);
        end
        
        function set.Fear(obj, fear)
            %set.Fear Set the value for property Fear
            validateattributes(fear, {'numeric'}, {'nonempty', 'scalar'}, 'Emotion', 'Fear');
            
            obj.JavaMessage.setFear(fear);
        end
        
        function happiness = get.Happiness(obj)
            %get.Happiness Get the value for property Happiness
            happiness = single(obj.JavaMessage.getHappiness);
        end
        
        function set.Happiness(obj, happiness)
            %set.Happiness Set the value for property Happiness
            validateattributes(happiness, {'numeric'}, {'nonempty', 'scalar'}, 'Emotion', 'Happiness');
            
            obj.JavaMessage.setHappiness(happiness);
        end
        
        function neutral = get.Neutral(obj)
            %get.Neutral Get the value for property Neutral
            neutral = single(obj.JavaMessage.getNeutral);
        end
        
        function set.Neutral(obj, neutral)
            %set.Neutral Set the value for property Neutral
            validateattributes(neutral, {'numeric'}, {'nonempty', 'scalar'}, 'Emotion', 'Neutral');
            
            obj.JavaMessage.setNeutral(neutral);
        end
        
        function sadness = get.Sadness(obj)
            %get.Sadness Get the value for property Sadness
            sadness = single(obj.JavaMessage.getSadness);
        end
        
        function set.Sadness(obj, sadness)
            %set.Sadness Set the value for property Sadness
            validateattributes(sadness, {'numeric'}, {'nonempty', 'scalar'}, 'Emotion', 'Sadness');
            
            obj.JavaMessage.setSadness(sadness);
        end
        
        function surprise = get.Surprise(obj)
            %get.Surprise Get the value for property Surprise
            surprise = single(obj.JavaMessage.getSurprise);
        end
        
        function set.Surprise(obj, surprise)
            %set.Surprise Set the value for property Surprise
            validateattributes(surprise, {'numeric'}, {'nonempty', 'scalar'}, 'Emotion', 'Surprise');
            
            obj.JavaMessage.setSurprise(surprise);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Anger = obj.Anger;
            cpObj.Contempt = obj.Contempt;
            cpObj.Disgust = obj.Disgust;
            cpObj.Fear = obj.Fear;
            cpObj.Happiness = obj.Happiness;
            cpObj.Neutral = obj.Neutral;
            cpObj.Sadness = obj.Sadness;
            cpObj.Surprise = obj.Surprise;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Anger = strObj.Anger;
            obj.Contempt = strObj.Contempt;
            obj.Disgust = strObj.Disgust;
            obj.Fear = strObj.Fear;
            obj.Happiness = strObj.Happiness;
            obj.Neutral = strObj.Neutral;
            obj.Sadness = strObj.Sadness;
            obj.Surprise = strObj.Surprise;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Anger = obj.Anger;
            strObj.Contempt = obj.Contempt;
            strObj.Disgust = obj.Disgust;
            strObj.Fear = obj.Fear;
            strObj.Happiness = obj.Happiness;
            strObj.Neutral = obj.Neutral;
            strObj.Sadness = obj.Sadness;
            strObj.Surprise = obj.Surprise;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.emotion_intensity.Emotion.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.emotion_intensity.Emotion;
            obj.reload(strObj);
        end
    end
end
