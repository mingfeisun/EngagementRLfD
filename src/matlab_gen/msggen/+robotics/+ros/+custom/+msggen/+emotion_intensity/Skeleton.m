classdef Skeleton < robotics.ros.Message
    %Skeleton MATLAB implementation of emotion_intensity/Skeleton
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'emotion_intensity/Skeleton' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '34722af981b6a61700ff31df5a97c2e0' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsQuaternionClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Quaternion') % Dispatch to MATLAB class for message type geometry_msgs/Quaternion
        GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        UserId
        Name
        Confidence
        Position
        Orientation
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Position', [], 'Orientation', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Confidence', 'Header', 'Name', 'Orientation', 'Position', 'UserId'} % List of non-constant message properties
        ROSPropertyList = {'confidence', 'header', 'name', 'orientation', 'position', 'user_id'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Skeleton(msg)
            %Skeleton Construct the message object Skeleton
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Skeleton', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function userid = get.UserId(obj)
            %get.UserId Get the value for property UserId
            userid = int32(obj.JavaMessage.getUserId);
        end
        
        function set.UserId(obj, userid)
            %set.UserId Set the value for property UserId
            validateattributes(userid, {'numeric'}, {'nonempty', 'scalar'}, 'Skeleton', 'UserId');
            
            obj.JavaMessage.setUserId(userid);
        end
        
        function name = get.Name(obj)
            %get.Name Get the value for property Name
            javaArray = obj.JavaMessage.getName;
            array = obj.readJavaArray(javaArray, 'char');
            name = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.Name(obj, name)
            %set.Name Set the value for property Name
            if ~isvector(name) && isempty(name)
                % Allow empty [] input
                name = cell.empty(0,1);
            end
            
            validateattributes(name, {'cell'}, {'vector'}, 'Skeleton', 'Name');
            if any(cellfun(@(x) ~ischar(x), name))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'name'));
            end
            
            javaArray = obj.JavaMessage.getName;
            array = obj.writeJavaArray(name, javaArray, 'char');
            obj.JavaMessage.setName(array);
        end
        
        function confidence = get.Confidence(obj)
            %get.Confidence Get the value for property Confidence
            javaArray = obj.JavaMessage.getConfidence;
            array = obj.readJavaArray(javaArray, 'single');
            confidence = single(array);
        end
        
        function set.Confidence(obj, confidence)
            %set.Confidence Set the value for property Confidence
            if ~isvector(confidence) && isempty(confidence)
                % Allow empty [] input
                confidence = single.empty(0,1);
            end
            
            validateattributes(confidence, {'numeric'}, {'vector'}, 'Skeleton', 'Confidence');
            
            javaArray = obj.JavaMessage.getConfidence;
            array = obj.writeJavaArray(confidence, javaArray, 'single');
            obj.JavaMessage.setConfidence(array);
        end
        
        function position = get.Position(obj)
            %get.Position Get the value for property Position
            if isempty(obj.Cache.Position)
                javaArray = obj.JavaMessage.getPosition;
                array = obj.readJavaArray(javaArray, obj.GeometryMsgsVector3Class);
                obj.Cache.Position = feval(obj.GeometryMsgsVector3Class, array);
            end
            position = obj.Cache.Position;
        end
        
        function set.Position(obj, position)
            %set.Position Set the value for property Position
            if ~isvector(position) && isempty(position)
                % Allow empty [] input
                position = feval([obj.GeometryMsgsVector3Class '.empty'], 0, 1);
            end
            
            validateattributes(position, {obj.GeometryMsgsVector3Class}, {'vector'}, 'Skeleton', 'Position');
            
            javaArray = obj.JavaMessage.getPosition;
            array = obj.writeJavaArray(position, javaArray, obj.GeometryMsgsVector3Class);
            obj.JavaMessage.setPosition(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Position)
                obj.Cache.Position = [];
                obj.Cache.Position = obj.Position;
            end
        end
        
        function orientation = get.Orientation(obj)
            %get.Orientation Get the value for property Orientation
            if isempty(obj.Cache.Orientation)
                javaArray = obj.JavaMessage.getOrientation;
                array = obj.readJavaArray(javaArray, obj.GeometryMsgsQuaternionClass);
                obj.Cache.Orientation = feval(obj.GeometryMsgsQuaternionClass, array);
            end
            orientation = obj.Cache.Orientation;
        end
        
        function set.Orientation(obj, orientation)
            %set.Orientation Set the value for property Orientation
            if ~isvector(orientation) && isempty(orientation)
                % Allow empty [] input
                orientation = feval([obj.GeometryMsgsQuaternionClass '.empty'], 0, 1);
            end
            
            validateattributes(orientation, {obj.GeometryMsgsQuaternionClass}, {'vector'}, 'Skeleton', 'Orientation');
            
            javaArray = obj.JavaMessage.getOrientation;
            array = obj.writeJavaArray(orientation, javaArray, obj.GeometryMsgsQuaternionClass);
            obj.JavaMessage.setOrientation(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Orientation)
                obj.Cache.Orientation = [];
                obj.Cache.Orientation = obj.Orientation;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Position = [];
            obj.Cache.Orientation = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.UserId = obj.UserId;
            cpObj.Name = obj.Name;
            cpObj.Confidence = obj.Confidence;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Position = copy(obj.Position);
            cpObj.Orientation = copy(obj.Orientation);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.UserId = strObj.UserId;
            obj.Name = strObj.Name;
            obj.Confidence = strObj.Confidence;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            PositionCell = arrayfun(@(x) feval([obj.GeometryMsgsVector3Class '.loadobj'], x), strObj.Position, 'UniformOutput', false);
            obj.Position = vertcat(PositionCell{:});
            OrientationCell = arrayfun(@(x) feval([obj.GeometryMsgsQuaternionClass '.loadobj'], x), strObj.Orientation, 'UniformOutput', false);
            obj.Orientation = vertcat(OrientationCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.UserId = obj.UserId;
            strObj.Name = obj.Name;
            strObj.Confidence = obj.Confidence;
            strObj.Header = saveobj(obj.Header);
            strObj.Position = arrayfun(@(x) saveobj(x), obj.Position);
            strObj.Orientation = arrayfun(@(x) saveobj(x), obj.Orientation);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.emotion_intensity.Skeleton.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.emotion_intensity.Skeleton;
            obj.reload(strObj);
        end
    end
end
